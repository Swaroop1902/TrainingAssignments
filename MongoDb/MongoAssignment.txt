Q.1>
1) Find irons of brand "Philips" or "Tefal" with price less than or equal to 30, color "red/white", power greater than or equal to 2000, and extras "cord storage space" and "spray function":
Query:-
  db.irons.find({
    brand: { $in: ["Philips", "Tefal"] },
    price: { $lte: 30 },
    "description.color": "red/white",
    "technically.power": { $gte: 2000 },
    extras: { $all: ["cord storage space", "spray function"] }
  });

2) Find irons with color not "red/white", weight less than 2, at least 2 positive reviews, height less than or equal to 20, and without "cord storage space", sorted by price descending and limit to 1:
Query:-

  db.irons.find({
    "description.color": { $ne: "red/white" },
    "technically.weight": { $lt: 2 },
    $expr: { $gte: [{ $size: "$reviews.plus" }, 2] },
    "measures.height": { $lte: 20 },
    extras: { $nin: ["cord storage space"] }
  }).sort({ price: -1 }).limit(1);

3) Increase the price of all irons by 10%:
Query:-

  db.irons.updateMany(
    {},
    { $mul: { price: 1.10 } }
  );

4) Apply a 15% discount to Philips irons and a 20% discount to Tefal irons:
Query:-

  db.irons.updateMany(
    { brand: "Philips" },
    { $mul: { price: 0.85 } } // 15% discount
  );

  db.irons.updateMany(
    { brand: "Tefal" },
    { $mul: { price: 0.80 } } // 20% discount
  );

Q.2>
1) Find laptops with price between 500 and 1000 or with HD "750GB":
Query:-

  db.laptops.find({
    $or: [
     { price: { $gte: 500, $lte: 1000 } },
     { "properties.HD": "750GB" }
    ]
  });

2) Update the OS of laptops with "Windows 10" to "Windows 8":
Query:-

  db.laptops.updateMany(
    { "properties.OS": "Windows 10" },
    { $set: { "properties.OS": "Windows 8" } }
  );

3) Find the name, price, and OS of the two cheapest laptops:
Query:-

  db.laptops.find(
    {},
    { name: 1, price: 1, "properties.OS": 1 }
  ).sort({ price: 1 }).limit(2);

4) Find laptops with reviews having a score between 4 and 4.2:
Query:-

  db.laptops.find({
    reviews: {
     $elemMatch: { score: { $gte: 4, $lte: 4.2 } }
    }
  });

5) Find laptops with 2 USB 3.0 ports, supporting Dutch language, and at least 2 languages:
Query:-

  db.laptops.find({
    "properties.USB.USB3_0": 2,
    LanguageOS: { $elemMatch: { $eq: "Dutch" } },
    $where: "this.LanguageOS.length >= 2"
  });

MOVIES:
1) How do you do an 'equal to' query? Just match the value for the queried key:
Query:-

  db.comedy.find({ year: 2012 });

2) Find all movies released in the year 2013:
Query:-

  db.comedy.find({ year: 2013 });

3) Find all movies from the year 2011 until now:
Query:-

  db.comedy.find({ year: { $gte: 2011 } });

4) Find all movies with a budget over 50 million dollars:
Query:-

  db.comedy.find({ 'merits.budget': { $gt: 50 } });

5) Find all movies of which the running time is longer than 105 minutes:
Query:-

  db.comedy.find({ 'technical.runningTime': { $gt: 105 } });

6) Find all movies of which the language is English:
Query:-

  db.comedy.find({ 'technical.language': 'English' });

7) Find all movies with running time between 100 and 110 minutes:
Query:-

  db.comedy.find({ 'technical.runningTime': { $gte: 100, $lte: 110 } });

8) Give name and box office of all movies with box office over 500 million dollars:
Query:-

  db.comedy.find(
    { 'merits.boxOffice': { $gt: 500 } },
    { name: 1, 'merits.boxOffice': 1 }
  );

9) Give name and box office of all movies with box office over 500, excluding _id:
Query:-

  db.comedy.find(
    { 'merits.boxOffice': { $gt: 500 } },
    { name: 1, 'merits.boxOffice': 1, _id: 0 }
  );

10) Find all comedies with a budget of 50, 60, 70, or 80 million dollars:
Query:-

   db.comedy.find({ 'merits.budget': { $in: [50, 60, 70, 80] } });

11) Find all comedies that have a running time other than 100 or 105 minutes:
Query:-

   db.comedy.find({ 'technical.runningTime': { $nin: [100, 105] } });

12) Find all comedies with the name "Ted" or "The Hangover" from the year 2012:
Query:-

   db.comedy.find({
    $or: [
      { name: 'Ted', year: 2012 },
      { name: 'The Hangover', year: 2012 }
    ]
   });

13) Find all comedies with a box office over 500 from the year 2010 or 2011:
Query:-

   db.comedy.find({
    $or: [
      { year: 2010 },
      { year: 2011 }
    ],
    'merits.boxOffice': { $gt: 500 }
   });

14) Find all comedies except for "Ted" or "The Hangover":
Query:-

   db.comedy.find({
    name: { $nin: ['Ted', 'The Hangover'] }
   });

15) Find all comedies not released in the years 2010 or 2011:
Query:-

   db.comedy.find({
    year: { $nin: [2010, 2011] }
   });

16) Find all movies for which the box office exceeded 500 million dollars and the budget was lower than or equal to 50 million dollars:
Query:-

   db.comedy.find({
    $and: [
      { 'merits.boxOffice': { $gt: 500 } },
      { 'merits.budget': { $lte: 50 } }
    ]
   });

17) Find all movies that have comments by Rob or Alex:
Query:-

   db.comedy.find({
    comments: { $elemMatch: { by: { $in: ['Rob', 'Alex'] } } }
   });

18) Find all movies with 4 actors:
Query:-

   db.comedy.find({ cast: { $size: 4 } });

19) Find all movies for which the comments contain the word "love":
Query:-

   db.comedy.find({ 'comments.text': /love/i });

20) Find all movies for which the comments do not contain the word "like":
Query:-

   db.comedy.find({ 'comments.text': { $not: /like/i } });

21) Find all comedies that were not released in 2012:
Query:-

   db.comedy.find({ year: { $ne: 2012 } });

22) Find all comedies that were released in 2011 or later with Ed Helms as part of the cast:
Query:-

   db.comedy.find({
    year: { $gte: 2011 },
    cast: 'Ed Helms'
   });

23) Find all movies that were commented by Steve and have a budget of 50 million dollars or more:
Query:-

   db.comedy.find({
    comments: { $elemMatch: { by: 'Steve' } },
    'merits.budget': { $gte: 50 }
   });

24) Find all movies with 3 comments or more:
Query:-

   db.comedy.find({
    comments: { $size: { $gte: 3 } }
   });

25) Find all movies commented by Anne and Robin:
Query:-

   db.comedy.find({
    comments: { $all: [{ by: 'Anne' }, { by: 'Robin' }] }
   });

26) Find all movies that have a sequel:
Query:-

   db.comedy.find({ sequel: { $exists: true } });

27) Find all movies that have a sequel of "The Hangover":
Query:-

   db.comedy.find({ sequel: 'The Hangover' });

28) Find all movies which have a field "prizes" and which won more than 10 prizes:
Query:-

   db.comedy.find({
    'technical.prizes': { $exists: true, $gt: 10 }
   });
